// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsNativeKeenASR(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsNativeKeenASR(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsNativeKeenASR(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashNativeKeenASR(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashNativeKeenASR(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashNativeKeenASR(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum NativeSpeakingTask: Int {
  case defaultTask = 0
  case oralReading = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeASREvent: Hashable {
  var text: String
  var words: [NativeASRWord]
  var isFinal: Bool


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NativeASREvent? {
    let text = pigeonVar_list[0] as! String
    let words = pigeonVar_list[1] as! [NativeASRWord]
    let isFinal = pigeonVar_list[2] as! Bool

    return NativeASREvent(
      text: text,
      words: words,
      isFinal: isFinal
    )
  }
  func toList() -> [Any?] {
    return [
      text,
      words,
      isFinal,
    ]
  }
  static func == (lhs: NativeASREvent, rhs: NativeASREvent) -> Bool {
    return deepEqualsNativeKeenASR(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativeKeenASR(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeASRWord: Hashable {
  var text: String
  var phones: [NativeASRPhone]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NativeASRWord? {
    let text = pigeonVar_list[0] as! String
    let phones = pigeonVar_list[1] as! [NativeASRPhone]

    return NativeASRWord(
      text: text,
      phones: phones
    )
  }
  func toList() -> [Any?] {
    return [
      text,
      phones,
    ]
  }
  static func == (lhs: NativeASRWord, rhs: NativeASRWord) -> Bool {
    return deepEqualsNativeKeenASR(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativeKeenASR(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeASRPhone: Hashable {
  var text: String
  var score: Double


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NativeASRPhone? {
    let text = pigeonVar_list[0] as! String
    let score = pigeonVar_list[1] as! Double

    return NativeASRPhone(
      text: text,
      score: score
    )
  }
  func toList() -> [Any?] {
    return [
      text,
      score,
    ]
  }
  static func == (lhs: NativeASRPhone, rhs: NativeASRPhone) -> Bool {
    return deepEqualsNativeKeenASR(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativeKeenASR(value: toList(), hasher: &hasher)
  }
}

private class NativeKeenASRPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return NativeSpeakingTask(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      return NativeASREvent.fromList(self.readValue() as! [Any?])
    case 131:
      return NativeASRWord.fromList(self.readValue() as! [Any?])
    case 132:
      return NativeASRPhone.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class NativeKeenASRPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? NativeSpeakingTask {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? NativeASREvent {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? NativeASRWord {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? NativeASRPhone {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class NativeKeenASRPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return NativeKeenASRPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return NativeKeenASRPigeonCodecWriter(data: data)
  }
}

class NativeKeenASRPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = NativeKeenASRPigeonCodec(readerWriter: NativeKeenASRPigeonCodecReaderWriter())
}

var nativeKeenASRPigeonMethodCodec = FlutterStandardMethodCodec(readerWriter: NativeKeenASRPigeonCodecReaderWriter());


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NativeKeenASR {
  func initializeWithAsset(bundleName: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func createDecodingGraphFromPhrases(phrases: [String], speakingTask: NativeSpeakingTask, name: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func prepareForListeningWithDecodingGraphWithName(name: String, computeGop: Bool, completion: @escaping (Result<Bool, Error>) -> Void)
  func startListening(completion: @escaping (Result<Bool, Error>) -> Void)
  func stopListening(completion: @escaping (Result<Bool, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NativeKeenASRSetup {
  static var codec: FlutterStandardMessageCodec { NativeKeenASRPigeonCodec.shared }
  /// Sets up an instance of `NativeKeenASR` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NativeKeenASR?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let initializeWithAssetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.keen_asr.NativeKeenASR.initializeWithAsset\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeWithAssetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let bundleNameArg = args[0] as! String
        api.initializeWithAsset(bundleName: bundleNameArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initializeWithAssetChannel.setMessageHandler(nil)
    }
    let createDecodingGraphFromPhrasesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.keen_asr.NativeKeenASR.createDecodingGraphFromPhrases\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createDecodingGraphFromPhrasesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let phrasesArg = args[0] as! [String]
        let speakingTaskArg = args[1] as! NativeSpeakingTask
        let nameArg = args[2] as! String
        api.createDecodingGraphFromPhrases(phrases: phrasesArg, speakingTask: speakingTaskArg, name: nameArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createDecodingGraphFromPhrasesChannel.setMessageHandler(nil)
    }
    let prepareForListeningWithDecodingGraphWithNameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.keen_asr.NativeKeenASR.prepareForListeningWithDecodingGraphWithName\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      prepareForListeningWithDecodingGraphWithNameChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let nameArg = args[0] as! String
        let computeGopArg = args[1] as! Bool
        api.prepareForListeningWithDecodingGraphWithName(name: nameArg, computeGop: computeGopArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      prepareForListeningWithDecodingGraphWithNameChannel.setMessageHandler(nil)
    }
    let startListeningChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.keen_asr.NativeKeenASR.startListening\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startListeningChannel.setMessageHandler { _, reply in
        api.startListening { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startListeningChannel.setMessageHandler(nil)
    }
    let stopListeningChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.keen_asr.NativeKeenASR.stopListening\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopListeningChannel.setMessageHandler { _, reply in
        api.stopListening { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopListeningChannel.setMessageHandler(nil)
    }
  }
}

private class PigeonStreamHandler<ReturnType>: NSObject, FlutterStreamHandler {
  private let wrapper: PigeonEventChannelWrapper<ReturnType>
  private var pigeonSink: PigeonEventSink<ReturnType>? = nil

  init(wrapper: PigeonEventChannelWrapper<ReturnType>) {
    self.wrapper = wrapper
  }

  func onListen(withArguments arguments: Any?, eventSink events: @escaping FlutterEventSink)
    -> FlutterError?
  {
    pigeonSink = PigeonEventSink<ReturnType>(events)
    wrapper.onListen(withArguments: arguments, sink: pigeonSink!)
    return nil
  }

  func onCancel(withArguments arguments: Any?) -> FlutterError? {
    pigeonSink = nil
    wrapper.onCancel(withArguments: arguments)
    return nil
  }
}

class PigeonEventChannelWrapper<ReturnType> {
  func onListen(withArguments arguments: Any?, sink: PigeonEventSink<ReturnType>) {}
  func onCancel(withArguments arguments: Any?) {}
}

class PigeonEventSink<ReturnType> {
  private let sink: FlutterEventSink

  init(_ sink: @escaping FlutterEventSink) {
    self.sink = sink
  }

  func success(_ value: ReturnType) {
    sink(value)
  }

  func error(code: String, message: String?, details: Any?) {
    sink(FlutterError(code: code, message: message, details: details))
  }

  func endOfStream() {
    sink(FlutterEndOfEventStream)
  }

}

class NativeStreamKeenASREventsStreamHandler: PigeonEventChannelWrapper<NativeASREvent> {
  static func register(with messenger: FlutterBinaryMessenger,
                      instanceName: String = "",
                      streamHandler: NativeStreamKeenASREventsStreamHandler) {
    var channelName = "dev.flutter.pigeon.keen_asr.NativeKeenASREvents.nativeStreamKeenASREvents"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = PigeonStreamHandler<NativeASREvent>(wrapper: streamHandler)
    let channel = FlutterEventChannel(name: channelName, binaryMessenger: messenger, codec: nativeKeenASRPigeonMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}
      
