// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.keenresearch.keenasr.flutter

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object NativeKeenASRPigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class NativeSpeakingTask(val raw: Int) {
  DEFAULT_TASK(0),
  ORAL_READING(1);

  companion object {
    fun ofRaw(raw: Int): NativeSpeakingTask? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeASREvent (
  val text: String,
  val words: List<NativeASRWord>,
  val isFinal: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeASREvent {
      val text = pigeonVar_list[0] as String
      val words = pigeonVar_list[1] as List<NativeASRWord>
      val isFinal = pigeonVar_list[2] as Boolean
      return NativeASREvent(text, words, isFinal)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      text,
      words,
      isFinal,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NativeASREvent) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativeKeenASRPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeASRWord (
  val text: String,
  val phones: List<NativeASRPhone>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeASRWord {
      val text = pigeonVar_list[0] as String
      val phones = pigeonVar_list[1] as List<NativeASRPhone>
      return NativeASRWord(text, phones)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      text,
      phones,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NativeASRWord) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativeKeenASRPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeASRPhone (
  val text: String,
  val score: Double
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeASRPhone {
      val text = pigeonVar_list[0] as String
      val score = pigeonVar_list[1] as Double
      return NativeASRPhone(text, score)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      text,
      score,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NativeASRPhone) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativeKeenASRPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class NativeKeenASRPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          NativeSpeakingTask.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeASREvent.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeASRWord.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeASRPhone.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NativeSpeakingTask -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is NativeASREvent -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is NativeASRWord -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is NativeASRPhone -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

val NativeKeenASRPigeonMethodCodec = StandardMethodCodec(NativeKeenASRPigeonCodec())


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface NativeKeenASR {
  fun initializeWithAsset(bundleName: String, callback: (Result<Boolean>) -> Unit)
  fun createDecodingGraphFromPhrases(phrases: List<String>, speakingTask: NativeSpeakingTask, name: String, callback: (Result<Boolean>) -> Unit)
  fun prepareForListeningWithDecodingGraphWithName(name: String, computeGop: Boolean, callback: (Result<Boolean>) -> Unit)
  fun startListening(callback: (Result<Boolean>) -> Unit)
  fun stopListening(callback: (Result<Boolean>) -> Unit)

  companion object {
    /** The codec used by NativeKeenASR. */
    val codec: MessageCodec<Any?> by lazy {
      NativeKeenASRPigeonCodec()
    }
    /** Sets up an instance of `NativeKeenASR` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: NativeKeenASR?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.keen_asr.NativeKeenASR.initializeWithAsset$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val bundleNameArg = args[0] as String
            api.initializeWithAsset(bundleNameArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeKeenASRPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(NativeKeenASRPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.keen_asr.NativeKeenASR.createDecodingGraphFromPhrases$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val phrasesArg = args[0] as List<String>
            val speakingTaskArg = args[1] as NativeSpeakingTask
            val nameArg = args[2] as String
            api.createDecodingGraphFromPhrases(phrasesArg, speakingTaskArg, nameArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeKeenASRPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(NativeKeenASRPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.keen_asr.NativeKeenASR.prepareForListeningWithDecodingGraphWithName$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val nameArg = args[0] as String
            val computeGopArg = args[1] as Boolean
            api.prepareForListeningWithDecodingGraphWithName(nameArg, computeGopArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeKeenASRPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(NativeKeenASRPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.keen_asr.NativeKeenASR.startListening$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.startListening{ result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeKeenASRPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(NativeKeenASRPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.keen_asr.NativeKeenASR.stopListening$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.stopListening{ result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeKeenASRPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(NativeKeenASRPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}

private class NativeKeenASRPigeonStreamHandler<T>(
    val wrapper: NativeKeenASRPigeonEventChannelWrapper<T>
) : EventChannel.StreamHandler {
  var pigeonSink: PigeonEventSink<T>? = null

  override fun onListen(p0: Any?, sink: EventChannel.EventSink) {
    pigeonSink = PigeonEventSink<T>(sink)
    wrapper.onListen(p0, pigeonSink!!)
  }

  override fun onCancel(p0: Any?) {
    pigeonSink = null
    wrapper.onCancel(p0)
  }
}

interface NativeKeenASRPigeonEventChannelWrapper<T> {
  open fun onListen(p0: Any?, sink: PigeonEventSink<T>) {}

  open fun onCancel(p0: Any?) {}
}

class PigeonEventSink<T>(private val sink: EventChannel.EventSink) {
  fun success(value: T) {
    sink.success(value)
  }

  fun error(errorCode: String, errorMessage: String?, errorDetails: Any?) {
    sink.error(errorCode, errorMessage, errorDetails)
  }

  fun endOfStream() {
    sink.endOfStream()
  }
}
      
abstract class NativeStreamKeenASREventsStreamHandler : NativeKeenASRPigeonEventChannelWrapper<NativeASREvent> {
  companion object {
    fun register(messenger: BinaryMessenger, streamHandler: NativeStreamKeenASREventsStreamHandler, instanceName: String = "") {
      var channelName: String = "dev.flutter.pigeon.keen_asr.NativeKeenASREvents.nativeStreamKeenASREvents"
      if (instanceName.isNotEmpty()) {
        channelName += ".$instanceName"
      }
      val internalStreamHandler = NativeKeenASRPigeonStreamHandler<NativeASREvent>(streamHandler)
      EventChannel(messenger, channelName, NativeKeenASRPigeonMethodCodec).setStreamHandler(internalStreamHandler)
    }
  }
}
      
